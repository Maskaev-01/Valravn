# Правила Cursor для создания веб-сайтов на Python + PostgreSQL + Render.com

## 1. Архитектура и фреймворки

### **Основной стек:**
- **Backend**: FastAPI (предпочтительно) или Flask для простых проектов
- **База данных**: PostgreSQL с SQLAlchemy ORM
- **Шаблоны**: Jinja2 или React/Vue.js для SPA
- **Стили**: Tailwind CSS или Bootstrap 5
- **Хостинг**: Render.com

### **Структура проекта:**
```
project/
├── app/
│   ├── __init__.py
│   ├── main.py          # Точка входа FastAPI
│   ├── models/          # SQLAlchemy модели
│   ├── routers/         # API endpoints
│   ├── templates/       # HTML шаблоны
│   ├── static/          # CSS, JS, изображения
│   └── database.py      # Подключение к БД
├── requirements.txt
├── Dockerfile
├── render.yaml          # Конфигурация Render
└── .env.example
```

## 2. Настройка FastAPI приложения

### **Базовая структура main.py:**
```python
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
import os

app = FastAPI(title="My Web App", version="1.0.0")

# Статические файлы и шаблоны
app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")

# Основные маршруты
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})
```

## 3. Конфигурация PostgreSQL

### **database.py:**
```python
import os
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@localhost/dbname")

# Для Render.com - исправление SSL
if DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

### **Пример модели:**
```python
from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.sql import func
from .database import Base

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    email = Column(String, unique=True, index=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
```

## 4. Конфигурация для Render.com

### **requirements.txt (обязательные пакеты):**
```
fastapi>=0.104.0
uvicorn[standard]>=0.24.0
sqlalchemy>=2.0.0
psycopg2-binary>=2.9.0
python-dotenv>=1.0.0
alembic>=1.12.0
jinja2>=3.1.0
python-multipart>=0.0.6
```

### **render.yaml:**
```yaml
services:
  - type: web
    name: my-web-app
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "uvicorn app.main:app --host 0.0.0.0 --port $PORT"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-db
          property: connectionString

databases:
  - name: my-postgres-db
    databaseName: myapp
    user: myapp_user
```

### **Dockerfile (опционально):**
```dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE $PORT

CMD uvicorn app.main:app --host 0.0.0.0 --port $PORT
```

## 5. Переменные окружения

### **.env.example:**
```env
DATABASE_URL=postgresql://username:password@localhost:5432/database_name
SECRET_KEY=your-secret-key-here
DEBUG=True
ENVIRONMENT=development
```

### **Использование в коде:**
```python
import os
from dotenv import load_dotenv

load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY", "fallback-secret-key")
DEBUG = os.getenv("DEBUG", "False").lower() == "true"
```

## 6. HTML шаблоны (Jinja2)

### **Базовый шаблон (base.html):**
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Мой сайт{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    <nav class="bg-blue-600 text-white p-4">
        <div class="container mx-auto">
            <h1 class="text-xl font-bold">Мой сайт</h1>
        </div>
    </nav>
    
    <main class="container mx-auto mt-8 px-4">
        {% block content %}{% endblock %}
    </main>
</body>
</html>
```

## 7. Миграции базы данных

### **Настройка Alembic:**
```python
# alembic/env.py
from app.database import Base
from app.models import *  # Импорт всех моделей

target_metadata = Base.metadata
```

### **Команды миграций:**
```bash
alembic init alembic
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head
```

## 8. Безопасность и лучшие практики

### **Обязательные меры:**
- Всегда используйте переменные окружения для секретных данных
- Валидируйте входные данные с помощью Pydantic
- Используйте HTTPS в продакшене (Render автоматически)
- Ограничивайте CORS политики
- Логируйте ошибки и мониторинг

### **Middleware для безопасности:**
```python
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://yourdomain.com"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

## 9. Деплой на Render.com

### **Пошаговая инструкция:**
1. Подключите GitHub репозиторий к Render
2. Создайте PostgreSQL базу данных в Render
3. Создайте Web Service, указав:
   - Build Command: `pip install -r requirements.txt`
   - Start Command: `uvicorn app.main:app --host 0.0.0.0 --port $PORT`
4. Добавьте переменную окружения DATABASE_URL из созданной БД
5. Запустите миграции через Render Shell: `alembic upgrade head`

## 10. Мониторинг и логирование

### **Настройка логирования:**
```python
import logging
import sys

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout
)

logger = logging.getLogger(__name__)
```

---

## Ключевые принципы:

1. **Простота**: Используйте минимально необходимый набор зависимостей
2. **Безопасность**: Никогда не коммитьте секретные данные
3. **Масштабируемость**: Готовьте архитектуру для роста
4. **Производительность**: Используйте connection pooling и кеширование
5. **Совместимость с Render**: Следуйте рекомендациям платформы для деплоя

### **Стандарты кода:**
- Используйте black для форматирования
- Следуйте PEP 8
- Документируйте API с помощью docstrings
- Пишите тесты для критичной логики 